/*
 * T·ªáp n√†y l√† m·ªôt ph·∫ßn c·ªßa Whitelist Bot Discord.
 *
 * Whitelist Bot Discord l√† ph·∫ßn m·ªÅm mi·ªÖn ph√≠: b·∫°n c√≥ th·ªÉ ph√¢n ph·ªëi l·∫°i ho·∫∑c s·ª≠a ƒë·ªïi
 * theo c√°c ƒëi·ªÅu kho·∫£n c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë∆∞·ª£c c√¥ng b·ªë b·ªüi
 * T·ªï ch·ª©c Ph·∫ßn m·ªÅm T·ª± do, phi√™n b·∫£n 3 ho·∫∑c (n·∫øu b·∫°n mu·ªën) b·∫•t k·ª≥ phi√™n b·∫£n n√†o sau ƒë√≥.
 *
 * Whitelist Bot Discord ƒë∆∞·ª£c ph√¢n ph·ªëi v·ªõi hy v·ªçng r·∫±ng n√≥ s·∫Ω h·ªØu √≠ch,
 * nh∆∞ng KH√îNG C√ì B·∫¢O H√ÄNH; th·∫≠m ch√≠ kh√¥ng bao g·ªìm c·∫£ b·∫£o ƒë·∫£m
 * V·ªÄ T√çNH TH∆Ø∆†NG M·∫†I ho·∫∑c PH√ô H·ª¢P CHO M·ªòT M·ª§C ƒê√çCH C·ª§ TH·ªÇ. Xem
 * Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.
 *
 * B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt b·∫£n sao c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU c√πng v·ªõi Whitelist Bot Discord.
 * N·∫øu kh√¥ng, h√£y xem <https://www.gnu.org/licenses/>.
 */

const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require("discord.js");
const { formatUptime } = require("../ultils/formatUptime");

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ping')
        .setDescription('Tr·∫°ng th√°i c·ªßa bot'),
    global: false,
    async execute(interaction, client) {
        const ping = client.ws.ping;
        const uptime = formatUptime(client.uptime);
        const memoryUsage = process.memoryUsage().heapUsed / 1024 / 1024;
        const numServers = client.guilds.cache.size;
        const numUsers = client.users.cache.size;
        const apiLatency = client.ws.ping;
        const discordJSVersion = require('discord.js').version;
        const nodeVersion = process.version;
        const version = require('../package.json').version;

        const devbtn = new ButtonBuilder()
            .setStyle(ButtonStyle.Link)
            .setLabel('Developer')
            .setEmoji('üë®‚Äçüíª')
            .setURL('https://discord.com/users/917970047325077615');

        const btnrow = new ActionRowBuilder().addComponents(devbtn);
        const pingembed = new EmbedBuilder()
            .setColor(parseInt('D70040', 16))
            .setAuthor({ name: `${client.user.username} Stats`, iconURL: client.user.avatarURL() })
            .addFields(
                { name: ':ping_pong: Ping', value: `‚îï ${ping} ms`, inline: true },
                { name: ':clock1: Uptime', value: '‚îï ' + uptime, inline: true },
                { name: ':file_cabinet: Memory', value: `‚îï ${Math.round(memoryUsage * 100) / 100} MB`, inline: true },
                { name: ':desktop: Servers', value: `‚îï ${numServers}`, inline: true },
                { name: ':busts_in_silhouette: Users', value: `‚îï ${numUsers}`, inline: true },
                { name: ':satellite: API Latency', value: `‚îï ${apiLatency} ms`, inline: true },
                { name: ':robot: Version', value: `‚îï v${version}`, inline: true },
                { name: ':blue_book: Discord.js', value: `‚îï v${discordJSVersion}`, inline: true },
                { name: ':green_book: Node.js', value: `‚îï ${nodeVersion}`, inline: true },
            )
            .setTimestamp()
            .setFooter({ text: `Requested by ${interaction.user.username}`, iconURL: interaction.user.avatarURL() });

        interaction.reply({ embeds: [pingembed], components: [btnrow] }).catch(console.error);
    },
};
