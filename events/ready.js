/*
 * T·ªáp n√†y l√† m·ªôt ph·∫ßn c·ªßa Whitelist Bot Discord.
 *
 * Whitelist Bot Discord l√† ph·∫ßn m·ªÅm mi·ªÖn ph√≠: b·∫°n c√≥ th·ªÉ ph√¢n ph·ªëi l·∫°i ho·∫∑c s·ª≠a ƒë·ªïi
 * theo c√°c ƒëi·ªÅu kho·∫£n c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë∆∞·ª£c c√¥ng b·ªë b·ªüi
 * T·ªï ch·ª©c Ph·∫ßn m·ªÅm T·ª± do, phi√™n b·∫£n 3 ho·∫∑c (n·∫øu b·∫°n mu·ªën) b·∫•t k·ª≥ phi√™n b·∫£n n√†o sau ƒë√≥.
 *
 * Whitelist Bot Discord ƒë∆∞·ª£c ph√¢n ph·ªëi v·ªõi hy v·ªçng r·∫±ng n√≥ s·∫Ω h·ªØu √≠ch,
 * nh∆∞ng KH√îNG C√ì B·∫¢O H√ÄNH; th·∫≠m ch√≠ kh√¥ng bao g·ªìm c·∫£ b·∫£o ƒë·∫£m
 * V·ªÄ T√çNH TH∆Ø∆†NG M·∫†I ho·∫∑c PH√ô H·ª¢P CHO M·ªòT M·ª§C ƒê√çCH C·ª§ TH·ªÇ. Xem
 * Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.
 *
 * B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt b·∫£n sao c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU c√πng v·ªõi Whitelist Bot Discord.
 * N·∫øu kh√¥ng, h√£y xem <https://www.gnu.org/licenses/>.
 */

const { Routes } = require('discord-api-types/v10');
const { REST } = require('@discordjs/rest');
const { Events } = require('discord.js');
const config = require('../config/config');
const path = require('path');
const loadCommands = require('../ultils/loadCommands');
const setActivity = require('../ultils/setActivity');
require('colors');

module.exports = {
  name: Events.ClientReady,
  once: true,
  async execute(client) {
    console.clear();
    console.log(`‚úÖ Logged in as ${client.user.tag}`.yellow);
    console.log('üîÑ ƒêang ƒëƒÉng k√Ω l·ªánh /setup...'.blue);

    const rest = new REST({ version: '10' }).setToken(config.token);
    const commandsPath = path.join(__dirname, '../commands');
    const { globalCommands } = loadCommands(commandsPath, client);

    // L·ªçc ra ch·ªâ l·ªánh t√™n l√† "setup"
    const setupCommand = globalCommands.find(cmd => cmd.name === 'setup');

    if (!setupCommand) {
      return console.error('‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh /setup trong th∆∞ m·ª•c commands.'.red);
    }

    try {
      await rest.put(
        Routes.applicationCommands(config.client.id),
        { body: [setupCommand] }
      );
      console.log('‚úÖ ƒê√£ ƒëƒÉng k√Ω l·ªánh /setup th√†nh c√¥ng!'.green);
    } catch (error) {
      console.error('‚ùå L·ªói khi ƒëƒÉng k√Ω l·ªánh /setup:'.red, error);
    }

    // Set activity n·∫øu c·∫ßn
    if (config.activity.fivem.enabled) {
      setActivity.updatePlayerCount(client, config.activity.fivem.interval);
    } else if (config.activity.discord.enabled) {
      client.user.setPresence({
        status: config.activity.discord.status,
        activities: [{
          name: config.activity.discord.text,
          type: config.activity.discord.type
        }]
      });
    }
  }
};
